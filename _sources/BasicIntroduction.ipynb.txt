{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Welcome to Caustic!\n",
    "\n",
    "In need of a differentiable strong gravitational lensing simulation package? Look no further! We have all your lensing simulator needs. In this tutorial we will cover the basics of caustic and how to get going making your own lensing configurations. Caustic is easy to use and very powerful, you will get to see some of that power here, but there will be more notebooks which demo specific use cases."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "%load_ext autoreload\n",
    "%autoreload 2\n",
    "\n",
    "import torch\n",
    "from torch.nn.functional import avg_pool2d\n",
    "import matplotlib.pyplot as plt\n",
    "from astropy.io import fits\n",
    "import numpy as np\n",
    "\n",
    "import caustic"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "FlatLambdaCDM(\n",
       "    name='cosmo',\n",
       "    static=[h0, critical_density_0, Om0],\n",
       "    dynamic=[],\n",
       "    x keys=[]\n",
       ")"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Specify the image/cosmology parameters\n",
    "n_pix = 100\n",
    "res = 0.05\n",
    "upsample_factor = 2\n",
    "fov = res * n_pix\n",
    "thx, thy = caustic.get_meshgrid(res/upsample_factor, upsample_factor*n_pix, upsample_factor*n_pix, dtype=torch.float32)\n",
    "z_l = torch.tensor(0.5, dtype=torch.float32)\n",
    "z_s = torch.tensor(1.5, dtype=torch.float32)\n",
    "cosmology = caustic.FlatLambdaCDM(name = \"cosmo\")\n",
    "cosmology.to(dtype=torch.float32)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Simulating an SIE lens\n",
    "\n",
    "Here we will demo the very basics of lensing with a classic `SIE` lens model. We will see what it takes to make an `SIE` model, lens a backgorund `Sersic` source, and sample some examples in a simulator. Caustic simulators can generalize to very complex scenarios. In these cases there can be a lot of parameters moving through the simulator, and the order/number of parameters may change depending on what lens or source is being used. To streamline this process, caustic impliments a class called `Parametrized` which has some knowledge of the parameters moving through it, this way it can keep track of everything for you. For this to work, you must put the parameters into a `Packed` object which it can recognize, each sub function can then unpack the parameters it needs. Below we will show some examples of what this looks like."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "# demo simulator with sersic source, SIE lens. then sample some examples. demo the model graph\n",
    "\n",
    "class Simple_Sim(caustic.Simulator):\n",
    "    def __init__(\n",
    "        self,\n",
    "        lens,\n",
    "        src,\n",
    "        z_s=None,\n",
    "        name: str = \"sim\",\n",
    "    ):\n",
    "        super().__init__(name) # need this so `Parametrized` can do its magic\n",
    "        \n",
    "        # These are the lens and source objects to keep track of\n",
    "        self.lens = lens\n",
    "        self.src = src\n",
    "        \n",
    "        # Here we can add a parameter to the simulator, in this case it is `z_s` which we will need later\n",
    "        self.add_param(\"z_s\", z_s)\n",
    "\n",
    "    def forward(self, params):# define the forward model\n",
    "        # Here the simulator unpacks the parameter it needs\n",
    "        z_s = self.unpack(params)\n",
    "\n",
    "        # Note this is very similar to before, except the packed up `x` is all the raytrace function needs to work\n",
    "        bx, by = self.lens.raytrace(thx, thy, z_s, params)\n",
    "        mu_fine = self.src.brightness(bx, by, params)\n",
    "        \n",
    "        # We return the sampled brightness at each pixel location\n",
    "        return avg_pool2d(mu_fine.squeeze()[None, None], upsample_factor)[0, 0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/svg+xml": [
       "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n",
       "<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n",
       " \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n",
       "<!-- Generated by graphviz version 2.43.0 (0)\n",
       " -->\n",
       "<!-- Title: %3 Pages: 1 -->\n",
       "<svg width=\"926pt\" height=\"188pt\"\n",
       " viewBox=\"0.00 0.00 926.00 188.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n",
       "<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 184)\">\n",
       "<title>%3</title>\n",
       "<polygon fill=\"white\" stroke=\"transparent\" points=\"-4,4 -4,-184 922,-184 922,4 -4,4\"/>\n",
       "<!-- sim -->\n",
       "<g id=\"node1\" class=\"node\">\n",
       "<title>sim</title>\n",
       "<ellipse fill=\"none\" stroke=\"black\" cx=\"243\" cy=\"-162\" rx=\"93.68\" ry=\"18\"/>\n",
       "<text text-anchor=\"middle\" x=\"243\" y=\"-158.3\" font-family=\"Times,serif\" font-size=\"14.00\">Simple_Sim(&#39;sim&#39;)</text>\n",
       "</g>\n",
       "<!-- sim/z_s -->\n",
       "<g id=\"node2\" class=\"node\">\n",
       "<title>sim/z_s</title>\n",
       "<polygon fill=\"lightgrey\" stroke=\"lightgrey\" points=\"173,-108 119,-108 119,-72 173,-72 173,-108\"/>\n",
       "<text text-anchor=\"middle\" x=\"146\" y=\"-86.3\" font-family=\"Times,serif\" font-size=\"14.00\">z_s</text>\n",
       "</g>\n",
       "<!-- sim&#45;&gt;sim/z_s -->\n",
       "<g id=\"edge1\" class=\"edge\">\n",
       "<title>sim&#45;&gt;sim/z_s</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M220.01,-144.41C207.49,-135.37 191.78,-124.04 178.07,-114.14\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"179.99,-111.21 169.84,-108.2 175.9,-116.89 179.99,-111.21\"/>\n",
       "</g>\n",
       "<!-- sie -->\n",
       "<g id=\"node3\" class=\"node\">\n",
       "<title>sie</title>\n",
       "<ellipse fill=\"none\" stroke=\"black\" cx=\"243\" cy=\"-90\" rx=\"51.99\" ry=\"18\"/>\n",
       "<text text-anchor=\"middle\" x=\"243\" y=\"-86.3\" font-family=\"Times,serif\" font-size=\"14.00\">SIE(&#39;sie&#39;)</text>\n",
       "</g>\n",
       "<!-- sim&#45;&gt;sie -->\n",
       "<g id=\"edge2\" class=\"edge\">\n",
       "<title>sim&#45;&gt;sie</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M243,-143.7C243,-135.98 243,-126.71 243,-118.11\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"246.5,-118.1 243,-108.1 239.5,-118.1 246.5,-118.1\"/>\n",
       "</g>\n",
       "<!-- src -->\n",
       "<g id=\"node10\" class=\"node\">\n",
       "<title>src</title>\n",
       "<ellipse fill=\"none\" stroke=\"black\" cx=\"639\" cy=\"-90\" rx=\"65.79\" ry=\"18\"/>\n",
       "<text text-anchor=\"middle\" x=\"639\" y=\"-86.3\" font-family=\"Times,serif\" font-size=\"14.00\">Sersic(&#39;src&#39;)</text>\n",
       "</g>\n",
       "<!-- sim&#45;&gt;src -->\n",
       "<g id=\"edge9\" class=\"edge\">\n",
       "<title>sim&#45;&gt;src</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M309.28,-149.28C383.41,-136.18 502.61,-115.11 575.56,-102.21\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"576.3,-105.64 585.54,-100.45 575.08,-98.74 576.3,-105.64\"/>\n",
       "</g>\n",
       "<!-- sie/z_l -->\n",
       "<g id=\"node4\" class=\"node\">\n",
       "<title>sie/z_l</title>\n",
       "<polygon fill=\"none\" stroke=\"black\" points=\"54,-36 0,-36 0,0 54,0 54,-36\"/>\n",
       "<text text-anchor=\"middle\" x=\"27\" y=\"-14.3\" font-family=\"Times,serif\" font-size=\"14.00\">z_l</text>\n",
       "</g>\n",
       "<!-- sie&#45;&gt;sie/z_l -->\n",
       "<g id=\"edge3\" class=\"edge\">\n",
       "<title>sie&#45;&gt;sie/z_l</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M203.92,-77.84C160.62,-65.43 93.75,-46.11 63.85,-35.88\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"64.92,-32.55 54.33,-32.44 62.54,-39.13 64.92,-32.55\"/>\n",
       "</g>\n",
       "<!-- sie/x0 -->\n",
       "<g id=\"node5\" class=\"node\">\n",
       "<title>sie/x0</title>\n",
       "<polygon fill=\"none\" stroke=\"black\" points=\"126,-36 72,-36 72,0 126,0 126,-36\"/>\n",
       "<text text-anchor=\"middle\" x=\"99\" y=\"-14.3\" font-family=\"Times,serif\" font-size=\"14.00\">x0</text>\n",
       "</g>\n",
       "<!-- sie&#45;&gt;sie/x0 -->\n",
       "<g id=\"edge4\" class=\"edge\">\n",
       "<title>sie&#45;&gt;sie/x0</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M214.21,-75C191.6,-64.01 159.97,-48.64 135.58,-36.78\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"136.8,-33.49 126.28,-32.26 133.74,-39.78 136.8,-33.49\"/>\n",
       "</g>\n",
       "<!-- sie/y0 -->\n",
       "<g id=\"node6\" class=\"node\">\n",
       "<title>sie/y0</title>\n",
       "<polygon fill=\"none\" stroke=\"black\" points=\"198,-36 144,-36 144,0 198,0 198,-36\"/>\n",
       "<text text-anchor=\"middle\" x=\"171\" y=\"-14.3\" font-family=\"Times,serif\" font-size=\"14.00\">y0</text>\n",
       "</g>\n",
       "<!-- sie&#45;&gt;sie/y0 -->\n",
       "<g id=\"edge5\" class=\"edge\">\n",
       "<title>sie&#45;&gt;sie/y0</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M226.3,-72.76C217.3,-64.01 206.01,-53.03 195.98,-43.28\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"198.22,-40.59 188.61,-36.12 193.34,-45.6 198.22,-40.59\"/>\n",
       "</g>\n",
       "<!-- sie/q -->\n",
       "<g id=\"node7\" class=\"node\">\n",
       "<title>sie/q</title>\n",
       "<polygon fill=\"none\" stroke=\"black\" points=\"270,-36 216,-36 216,0 270,0 270,-36\"/>\n",
       "<text text-anchor=\"middle\" x=\"243\" y=\"-14.3\" font-family=\"Times,serif\" font-size=\"14.00\">q</text>\n",
       "</g>\n",
       "<!-- sie&#45;&gt;sie/q -->\n",
       "<g id=\"edge6\" class=\"edge\">\n",
       "<title>sie&#45;&gt;sie/q</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M243,-71.7C243,-63.98 243,-54.71 243,-46.11\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"246.5,-46.1 243,-36.1 239.5,-46.1 246.5,-46.1\"/>\n",
       "</g>\n",
       "<!-- sie/phi -->\n",
       "<g id=\"node8\" class=\"node\">\n",
       "<title>sie/phi</title>\n",
       "<polygon fill=\"none\" stroke=\"black\" points=\"342,-36 288,-36 288,0 342,0 342,-36\"/>\n",
       "<text text-anchor=\"middle\" x=\"315\" y=\"-14.3\" font-family=\"Times,serif\" font-size=\"14.00\">phi</text>\n",
       "</g>\n",
       "<!-- sie&#45;&gt;sie/phi -->\n",
       "<g id=\"edge7\" class=\"edge\">\n",
       "<title>sie&#45;&gt;sie/phi</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M259.7,-72.76C268.7,-64.01 279.99,-53.03 290.02,-43.28\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"292.66,-45.6 297.39,-36.12 287.78,-40.59 292.66,-45.6\"/>\n",
       "</g>\n",
       "<!-- sie/b -->\n",
       "<g id=\"node9\" class=\"node\">\n",
       "<title>sie/b</title>\n",
       "<polygon fill=\"none\" stroke=\"black\" points=\"414,-36 360,-36 360,0 414,0 414,-36\"/>\n",
       "<text text-anchor=\"middle\" x=\"387\" y=\"-14.3\" font-family=\"Times,serif\" font-size=\"14.00\">b</text>\n",
       "</g>\n",
       "<!-- sie&#45;&gt;sie/b -->\n",
       "<g id=\"edge8\" class=\"edge\">\n",
       "<title>sie&#45;&gt;sie/b</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M271.79,-75C294.4,-64.01 326.03,-48.64 350.42,-36.78\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"352.26,-39.78 359.72,-32.26 349.2,-33.49 352.26,-39.78\"/>\n",
       "</g>\n",
       "<!-- src/x0 -->\n",
       "<g id=\"node11\" class=\"node\">\n",
       "<title>src/x0</title>\n",
       "<polygon fill=\"none\" stroke=\"black\" points=\"486,-36 432,-36 432,0 486,0 486,-36\"/>\n",
       "<text text-anchor=\"middle\" x=\"459\" y=\"-14.3\" font-family=\"Times,serif\" font-size=\"14.00\">x0</text>\n",
       "</g>\n",
       "<!-- src&#45;&gt;src/x0 -->\n",
       "<g id=\"edge10\" class=\"edge\">\n",
       "<title>src&#45;&gt;src/x0</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M599.52,-75.53C572.48,-66.07 535.68,-52.73 495.47,-36.03\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"496.59,-32.71 486.01,-32.07 493.88,-39.16 496.59,-32.71\"/>\n",
       "</g>\n",
       "<!-- src/y0 -->\n",
       "<g id=\"node12\" class=\"node\">\n",
       "<title>src/y0</title>\n",
       "<polygon fill=\"none\" stroke=\"black\" points=\"558,-36 504,-36 504,0 558,0 558,-36\"/>\n",
       "<text text-anchor=\"middle\" x=\"531\" y=\"-14.3\" font-family=\"Times,serif\" font-size=\"14.00\">y0</text>\n",
       "</g>\n",
       "<!-- src&#45;&gt;src/y0 -->\n",
       "<g id=\"edge11\" class=\"edge\">\n",
       "<title>src&#45;&gt;src/y0</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M614.49,-73.12C600.11,-63.79 581.69,-51.85 565.81,-41.56\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"567.59,-38.55 557.3,-36.04 563.78,-44.42 567.59,-38.55\"/>\n",
       "</g>\n",
       "<!-- src/q -->\n",
       "<g id=\"node13\" class=\"node\">\n",
       "<title>src/q</title>\n",
       "<polygon fill=\"none\" stroke=\"black\" points=\"630,-36 576,-36 576,0 630,0 630,-36\"/>\n",
       "<text text-anchor=\"middle\" x=\"603\" y=\"-14.3\" font-family=\"Times,serif\" font-size=\"14.00\">q</text>\n",
       "</g>\n",
       "<!-- src&#45;&gt;src/q -->\n",
       "<g id=\"edge12\" class=\"edge\">\n",
       "<title>src&#45;&gt;src/q</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M630.29,-72.05C626.15,-64.01 621.11,-54.2 616.49,-45.23\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"619.57,-43.57 611.88,-36.28 613.35,-46.77 619.57,-43.57\"/>\n",
       "</g>\n",
       "<!-- src/phi -->\n",
       "<g id=\"node14\" class=\"node\">\n",
       "<title>src/phi</title>\n",
       "<polygon fill=\"none\" stroke=\"black\" points=\"702,-36 648,-36 648,0 702,0 702,-36\"/>\n",
       "<text text-anchor=\"middle\" x=\"675\" y=\"-14.3\" font-family=\"Times,serif\" font-size=\"14.00\">phi</text>\n",
       "</g>\n",
       "<!-- src&#45;&gt;src/phi -->\n",
       "<g id=\"edge13\" class=\"edge\">\n",
       "<title>src&#45;&gt;src/phi</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M647.71,-72.05C651.85,-64.01 656.89,-54.2 661.51,-45.23\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"664.65,-46.77 666.12,-36.28 658.43,-43.57 664.65,-46.77\"/>\n",
       "</g>\n",
       "<!-- src/n -->\n",
       "<g id=\"node15\" class=\"node\">\n",
       "<title>src/n</title>\n",
       "<polygon fill=\"none\" stroke=\"black\" points=\"774,-36 720,-36 720,0 774,0 774,-36\"/>\n",
       "<text text-anchor=\"middle\" x=\"747\" y=\"-14.3\" font-family=\"Times,serif\" font-size=\"14.00\">n</text>\n",
       "</g>\n",
       "<!-- src&#45;&gt;src/n -->\n",
       "<g id=\"edge14\" class=\"edge\">\n",
       "<title>src&#45;&gt;src/n</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M663.51,-73.12C677.89,-63.79 696.31,-51.85 712.19,-41.56\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"714.22,-44.42 720.7,-36.04 710.41,-38.55 714.22,-44.42\"/>\n",
       "</g>\n",
       "<!-- src/Re -->\n",
       "<g id=\"node16\" class=\"node\">\n",
       "<title>src/Re</title>\n",
       "<polygon fill=\"none\" stroke=\"black\" points=\"846,-36 792,-36 792,0 846,0 846,-36\"/>\n",
       "<text text-anchor=\"middle\" x=\"819\" y=\"-14.3\" font-family=\"Times,serif\" font-size=\"14.00\">Re</text>\n",
       "</g>\n",
       "<!-- src&#45;&gt;src/Re -->\n",
       "<g id=\"edge15\" class=\"edge\">\n",
       "<title>src&#45;&gt;src/Re</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M678.48,-75.53C705.52,-66.07 742.32,-52.73 782.53,-36.03\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"784.12,-39.16 791.99,-32.07 781.41,-32.71 784.12,-39.16\"/>\n",
       "</g>\n",
       "<!-- src/Ie -->\n",
       "<g id=\"node17\" class=\"node\">\n",
       "<title>src/Ie</title>\n",
       "<polygon fill=\"none\" stroke=\"black\" points=\"918,-36 864,-36 864,0 918,0 918,-36\"/>\n",
       "<text text-anchor=\"middle\" x=\"891\" y=\"-14.3\" font-family=\"Times,serif\" font-size=\"14.00\">Ie</text>\n",
       "</g>\n",
       "<!-- src&#45;&gt;src/Ie -->\n",
       "<g id=\"edge16\" class=\"edge\">\n",
       "<title>src&#45;&gt;src/Ie</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M691.8,-79.13C733.82,-70.59 794.1,-56.79 854.1,-35.98\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"855.46,-39.21 863.72,-32.57 853.13,-32.61 855.46,-39.21\"/>\n",
       "</g>\n",
       "</g>\n",
       "</svg>\n"
      ],
      "text/plain": [
       "<graphviz.graphs.Digraph at 0x7fca9dbb87f0>"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sie = caustic.lenses.SIE(cosmology, name = \"sie\")\n",
    "src = caustic.sources.Sersic(name = \"src\")\n",
    "\n",
    "sim = Simple_Sim(sie, src, torch.tensor(0.8))\n",
    "\n",
    "sim.get_graph(True, True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Simple_Sim(\n",
      "    name='sim',\n",
      "    static=[z_s],\n",
      "    dynamic=[],\n",
      "    x keys=[('sie': ['z_l', 'x0', 'y0', 'q', 'phi', 'b']), ('src': ['x0', 'y0', 'q', 'phi', 'n', 'Re', 'Ie'])]\n",
      ")\n",
      "SIE(\n",
      "    name='sie',\n",
      "    static=[],\n",
      "    dynamic=[z_l, x0, y0, q, phi, b],\n",
      "    x keys=[('sie': ['z_l', 'x0', 'y0', 'q', 'phi', 'b'])]\n",
      ")\n"
     ]
    }
   ],
   "source": [
    "print(sim)\n",
    "print(sie)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Reading the x_keys above we can input the parameters that we would like the simulator to evaluate\n",
    "x = torch.tensor([\n",
    "    z_l.item(), # sie z_l\n",
    "    0.7,     # sie x0\n",
    "    0.13,    # sie y0\n",
    "    0.4,     # sie q\n",
    "    np.pi/5, # sie phi\n",
    "    1.,      # sie b\n",
    "    0.2,     # src x0\n",
    "    0.5,      # src y0\n",
    "    0.5,      # src q\n",
    "    -np.pi/4, # src phi\n",
    "    1.5,       # src n\n",
    "    2.5,      # src Re\n",
    "    1.,       # src Ie\n",
    "])\n",
    "plt.imshow(sim(x), origin=\"lower\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Where to go next?\n",
    "\n",
    "The caustic tutorials are generally short and to the point, that way you can idenfity what you want and jump right to some useful code that demo's the particular problem you face. Below is a list of caustic tutorials and a quick description of what you will learn in each one::\n",
    "\n",
    "- `LensZoo`: here you can see all the built-in lens mass distributions in `caustic` and how they distort the same background Seric source.\n",
    "- `Playground`: here we demo the main visualizations of a lensing system (deflection angles, convergence, potential, time delay, magnification) in an interactive display so you can change the parameters by hand and see how the visuals change!\n",
    "- `VisualizeCaustics`: here you can see how to find and display caustics, a must when using `caustic`!\n",
    "- `Simulators`: here we describe the powerful simulator framework and how it can be used to quickly swap models, parameters, and other features and turn a complex forward model into a simple function.\n",
    "- `InvertLensEquation`: here we demo forward ray tracing in `caustic` the process of mapping from the source plane to the image plane."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "PY39",
   "language": "python",
   "name": "py39"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
